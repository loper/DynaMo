From 8df591914b9e7fc94f3f4c4f3c54ee0e8370f257 Mon Sep 17 00:00:00 2001
From: Loper <loper.t2h@gmail.com>
Date: Wed, 15 Feb 2012 15:12:38 +0100
Subject: [PATCH] patch 1

---
 Konfiguracja.py |   39 +++++++++++++++++++++++----------------
 README          |    4 ++--
 2 files changed, 25 insertions(+), 18 deletions(-)

diff --git a/Konfiguracja.py b/Konfiguracja.py
index eb5bf5a..8da5c47 100644
--- a/Konfiguracja.py
+++ b/Konfiguracja.py
@@ -1,33 +1,40 @@
 #-*- coding: utf-8 -*-
 '''umożliwia wczytywanie ustawień do programu'''
+import logging
 
 class Konfiguracja(object):
     '''klasa Konfiguracja'''
-    
+
     __ustawienia = {}
 
     def __init__(self, plik):
         self.__otworz_plik(plik)
-    
+
     def __otworz_plik(self, konfig):
         '''otwiera plik i odczytuje z niego konfigurację'''
-        plik = open(konfig, 'r')
-        plik = plik.readlines()
-        for linia in plik:                   
-            if len(linia) <= 1:
-                continue
-            if linia[0] in ('#', '/'):
-                continue
-            linia = linia.rstrip().split("=")
-            if len(linia) != 2:
-                continue
-            self.__dodaj_do_ustawien(linia[0], linia[1])
-            
-        
+        try:
+            plik_konf = open(konfig, 'r')
+            for linia in plik_konf.readlines():
+                if len(linia) <= 1:
+                    continue
+                if linia[0] in ('#', '/'):
+                    continue
+                linia = linia.rstrip().split("=")
+                if len(linia) != 2:
+                    continue
+                self.__dodaj_do_ustawien(linia[0], linia[1])
+            del plik_konf
+        except:
+            logging.basicConfig(
+                    format = '%(message)s (in %(funcName)s at %(lineno)d)')
+            logging.error("Błąd: Nie można odnaleźć pliku konfiguracyjnego '%s'" % konfig)
+            exit(-1)
+
+
     def __dodaj_do_ustawien(self, klucz, wartosc):
         '''dodaje pozycje do słownika ustawień'''
         self.__ustawienia.update({klucz:wartosc})
-        
+
     def podaj_wartosc(self, klucz):
         try:
             return self.__ustawienia[klucz]
diff --git a/README b/README
index 0d13104..6c33ac7 100644
--- a/README
+++ b/README
@@ -1,6 +1,6 @@
 DynaMo
 
-ver. 1.0
+ver. 1.1
 _by Loper_
 
 Program umożliwia zarządzanie dynamicznymi obiektami i wywoływanie odpowiednich obiektów, co ułatwia rozbudowę programu o nową funkcjonalność. Stworzony jest w formie "wzorca", który można dostosować do własnych potrzeb i wykorzystać w swoich projektach. Zalecany jest wszędzie tam, gdzie programy tworzone są modułowo, nie tylko przez jedną osobę.
@@ -15,4 +15,4 @@ Funkcjonalność:
  - korekcja duplikatów z menu
  - tworzenie listy załadowanych modułów
  - włączanie programu w trybie "gadatliwym" (verbose)
-
+ - wczytywanie ustawień z pliku konfiguracyjnego
-- 
1.7.8.4

